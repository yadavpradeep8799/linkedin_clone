{"ast":null,"code":"import React from 'react';\nvar isStyleObject = function (obj) {\n  return typeof obj === 'object' && obj !== null;\n};\nvar OTPInput = function (_a) {\n  var _b = _a.value,\n    value = _b === void 0 ? '' : _b,\n    _c = _a.numInputs,\n    numInputs = _c === void 0 ? 4 : _c,\n    onChange = _a.onChange,\n    onPaste = _a.onPaste,\n    renderInput = _a.renderInput,\n    _d = _a.shouldAutoFocus,\n    shouldAutoFocus = _d === void 0 ? false : _d,\n    _e = _a.inputType,\n    inputType = _e === void 0 ? 'text' : _e,\n    renderSeparator = _a.renderSeparator,\n    placeholder = _a.placeholder,\n    containerStyle = _a.containerStyle,\n    inputStyle = _a.inputStyle,\n    _f = _a.skipDefaultStyles,\n    skipDefaultStyles = _f === void 0 ? false : _f;\n  var _g = React.useState(0),\n    activeInput = _g[0],\n    setActiveInput = _g[1];\n  var inputRefs = React.useRef([]);\n  var getOTPValue = function () {\n    return value ? value.toString().split('') : [];\n  };\n  var isInputNum = inputType === 'number' || inputType === 'tel';\n  React.useEffect(function () {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n  React.useEffect(function () {\n    var _a;\n    if (shouldAutoFocus) {\n      (_a = inputRefs.current[0]) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }, [shouldAutoFocus]);\n  var getPlaceholderValue = function () {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n  var isInputValueValid = function (value) {\n    var isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n  var handleChange = function (event) {\n    var value = event.target.value;\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n  var handleInputChange = function (event) {\n    var nativeEvent = event.nativeEvent;\n    var value = event.target.value;\n    if (!isInputValueValid(value)) {\n      // Pasting from the native autofill suggestion on a mobile device can pass\n      // the pasted string as one long input to one of the cells. This ensures\n      // that we handle the full input and not just the first character.\n      if (value.length === numInputs) {\n        var hasInvalidInput = value.split('').some(function (cellInput) {\n          return !isInputValueValid(cellInput);\n        });\n        if (!hasInvalidInput) {\n          handleOTPChange(value.split(''));\n          focusInput(numInputs - 1);\n        }\n      }\n      // @ts-expect-error - This was added previously to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n  var handleFocus = function (event) {\n    return function (index) {\n      setActiveInput(index);\n      event.target.select();\n    };\n  };\n  var handleBlur = function () {\n    setActiveInput(activeInput - 1);\n  };\n  var handleKeyDown = function (event) {\n    var otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (event.code === 'Spacebar' || event.code === 'Space' || event.code === 'ArrowUp' || event.code === 'ArrowDown') {\n      event.preventDefault();\n    }\n  };\n  var focusInput = function (index) {\n    var _a, _b;\n    var activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n    if (inputRefs.current[activeInput]) {\n      (_a = inputRefs.current[activeInput]) === null || _a === void 0 ? void 0 : _a.focus();\n      (_b = inputRefs.current[activeInput]) === null || _b === void 0 ? void 0 : _b.select();\n      setActiveInput(activeInput);\n    }\n  };\n  var changeCodeAtFocus = function (value) {\n    var otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n  var handleOTPChange = function (otp) {\n    var otpValue = otp.join('');\n    onChange(otpValue);\n  };\n  var handlePaste = function (event) {\n    var _a;\n    event.preventDefault();\n    var otp = getOTPValue();\n    var nextActiveInput = activeInput;\n    // Get pastedData in an array of max size (num of inputs - current position)\n    var pastedData = event.clipboardData.getData('text/plain').slice(0, numInputs - activeInput).split('');\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some(function (value) {\n      return isNaN(Number(value));\n    })) {\n      return;\n    }\n    // Paste data from focused input onwards\n    for (var pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = (_a = pastedData.shift()) !== null && _a !== void 0 ? _a : '';\n        nextActiveInput++;\n      }\n    }\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n  return React.createElement(\"div\", {\n    style: Object.assign({\n      display: 'flex',\n      alignItems: 'center'\n    }, isStyleObject(containerStyle) && containerStyle),\n    className: typeof containerStyle === 'string' ? containerStyle : undefined,\n    onPaste: onPaste\n  }, Array.from({\n    length: numInputs\n  }, function (_, index) {\n    return index;\n  }).map(function (index) {\n    var _a, _b, _c;\n    return React.createElement(React.Fragment, {\n      key: index\n    }, renderInput({\n      value: (_a = getOTPValue()[index]) !== null && _a !== void 0 ? _a : '',\n      placeholder: (_c = (_b = getPlaceholderValue()) === null || _b === void 0 ? void 0 : _b[index]) !== null && _c !== void 0 ? _c : undefined,\n      ref: function (element) {\n        return inputRefs.current[index] = element;\n      },\n      onChange: handleChange,\n      onFocus: function (event) {\n        return handleFocus(event)(index);\n      },\n      onBlur: handleBlur,\n      onKeyDown: handleKeyDown,\n      onPaste: handlePaste,\n      autoComplete: 'off',\n      'aria-label': \"Please enter OTP character \".concat(index + 1),\n      style: Object.assign(!skipDefaultStyles ? {\n        width: '1em',\n        textAlign: 'center'\n      } : {}, isStyleObject(inputStyle) ? inputStyle : {}),\n      className: typeof inputStyle === 'string' ? inputStyle : undefined,\n      type: inputType,\n      inputMode: isInputNum ? 'numeric' : 'text',\n      onInput: handleInputChange\n    }, index), index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator));\n  }));\n};\nexport { OTPInput as default };","map":{"version":3,"names":["isStyleObject","obj","OTPInput","_a","_b","value","_c","numInputs","onChange","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","placeholder","containerStyle","inputStyle","_f","skipDefaultStyles","_g","React","useState","activeInput","setActiveInput","inputRefs","useRef","getOTPValue","toString","split","isInputNum","useEffect","current","slice","focus","getPlaceholderValue","length","console","error","undefined","isInputValueValid","isTypeValid","isNaN","Number","trim","handleChange","event","target","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","hasInvalidInput","some","cellInput","handleOTPChange","data","preventDefault","handleFocus","index","select","handleBlur","handleKeyDown","otp","code","key","includes","Math","max","min","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","pos","shift","createElement","style","Object","assign","display","alignItems","className","Array","from","_","map","Fragment","ref","element","onFocus","onBlur","onKeyDown","autoComplete","concat","width","textAlign","type","inputMode","onInput"],"sources":["H:\\PRADEEP_CLIENTS\\all project\\linkedin_clone\\node_modules\\src\\index.tsx"],"sourcesContent":["import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    const value = event.target.value;\n\n    if (!isInputValueValid(value)) {\n      // Pasting from the native autofill suggestion on a mobile device can pass\n      // the pasted string as one long input to one of the cells. This ensures\n      // that we handle the full input and not just the first character.\n      if (value.length === numInputs) {\n        const hasInvalidInput = value.split('').some((cellInput) => !isInputValueValid(cellInput));\n        if (!hasInvalidInput) {\n          handleOTPChange(value.split(''));\n          focusInput(numInputs - 1);\n        }\n      }\n\n      // @ts-expect-error - This was added previously to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}