{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// Define the structure of the Profile object\n\n// Define the structure of the UserState object\n\n// Initial state for the user slice\nconst initialState = {\n  profile: null,\n  phoneNumber: null,\n  loading: false,\n  error: null\n};\n\n// Create the user slice with reducers\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    // Action to set profile data\n    setProfile(state, action) {\n      state.profile = action.payload;\n      state.loading = false;\n      state.error = null;\n    },\n    // Action to set phone number\n    setPhoneNumber(state, action) {\n      state.phoneNumber = action.payload;\n    },\n    // Action to handle login (potentially setting phone number and handling other logic)\n    login(state, action) {\n      state.phoneNumber = action.payload.phoneNumber;\n      // Handle other login logic here if needed\n    },\n    // Action to set loading state\n    setLoading(state, action) {\n      state.loading = action.payload;\n    },\n    // Action to handle errors\n    setError(state, action) {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    // Action to clear profile data\n    clearProfile(state) {\n      state.profile = null;\n    }\n  }\n});\n\n// Export actions for use in components\nexport const {\n  setProfile,\n  setPhoneNumber,\n  login,\n  setLoading,\n  setError,\n  clearProfile\n} = userSlice.actions;\n\n// Export the reducer to be used in the store\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","profile","phoneNumber","loading","error","userSlice","name","reducers","setProfile","state","action","payload","setPhoneNumber","login","setLoading","setError","clearProfile","actions","reducer"],"sources":["D:/React_Js/linkedin-clone/src/redux/userSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// Define the structure of the Profile object\r\ninterface Profile {\r\n  name: string;\r\n  title: string;\r\n  location: string;\r\n  profilePicture: string;\r\n  bio?: string; // Make bio optional\r\n}\r\n\r\n// Define the structure of the UserState object\r\ninterface UserState {\r\n  profile: Profile | null; // Profile can be null initially\r\n  phoneNumber: string | null; // Phone number can be null initially\r\n  loading: boolean; // Track loading state\r\n  error: string | null; // Track errors\r\n}\r\n\r\n// Initial state for the user slice\r\nconst initialState: UserState = {\r\n  profile: null,\r\n  phoneNumber: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// Create the user slice with reducers\r\nconst userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n  reducers: {\r\n    // Action to set profile data\r\n    setProfile(state, action: PayloadAction<Profile>) {\r\n      state.profile = action.payload;\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n    // Action to set phone number\r\n    setPhoneNumber(state, action: PayloadAction<string>) {\r\n      state.phoneNumber = action.payload;\r\n    },\r\n    // Action to handle login (potentially setting phone number and handling other logic)\r\n    login(state, action: PayloadAction<{ phoneNumber: string }>) {\r\n      state.phoneNumber = action.payload.phoneNumber;\r\n      // Handle other login logic here if needed\r\n    },\r\n    // Action to set loading state\r\n    setLoading(state, action: PayloadAction<boolean>) {\r\n      state.loading = action.payload;\r\n    },\r\n    // Action to handle errors\r\n    setError(state, action: PayloadAction<string | null>) {\r\n      state.error = action.payload;\r\n      state.loading = false;\r\n    },\r\n    // Action to clear profile data\r\n    clearProfile(state) {\r\n      state.profile = null;\r\n    },\r\n  },\r\n});\r\n\r\n// Export actions for use in components\r\nexport const { setProfile, setPhoneNumber, login, setLoading, setError, clearProfile } = userSlice.actions;\r\n\r\n// Export the reducer to be used in the store\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;;AAE7D;;AASA;;AAQA;AACA,MAAMC,YAAuB,GAAG;EAC9BC,OAAO,EAAE,IAAI;EACbC,WAAW,EAAE,IAAI;EACjBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC5BO,IAAI,EAAE,MAAM;EACZN,YAAY;EACZO,QAAQ,EAAE;IACR;IACAC,UAAUA,CAACC,KAAK,EAAEC,MAA8B,EAAE;MAChDD,KAAK,CAACR,OAAO,GAAGS,MAAM,CAACC,OAAO;MAC9BF,KAAK,CAACN,OAAO,GAAG,KAAK;MACrBM,KAAK,CAACL,KAAK,GAAG,IAAI;IACpB,CAAC;IACD;IACAQ,cAAcA,CAACH,KAAK,EAAEC,MAA6B,EAAE;MACnDD,KAAK,CAACP,WAAW,GAAGQ,MAAM,CAACC,OAAO;IACpC,CAAC;IACD;IACAE,KAAKA,CAACJ,KAAK,EAAEC,MAA8C,EAAE;MAC3DD,KAAK,CAACP,WAAW,GAAGQ,MAAM,CAACC,OAAO,CAACT,WAAW;MAC9C;IACF,CAAC;IACD;IACAY,UAAUA,CAACL,KAAK,EAAEC,MAA8B,EAAE;MAChDD,KAAK,CAACN,OAAO,GAAGO,MAAM,CAACC,OAAO;IAChC,CAAC;IACD;IACAI,QAAQA,CAACN,KAAK,EAAEC,MAAoC,EAAE;MACpDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACN,OAAO,GAAG,KAAK;IACvB,CAAC;IACD;IACAa,YAAYA,CAACP,KAAK,EAAE;MAClBA,KAAK,CAACR,OAAO,GAAG,IAAI;IACtB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEO,UAAU;EAAEI,cAAc;EAAEC,KAAK;EAAEC,UAAU;EAAEC,QAAQ;EAAEC;AAAa,CAAC,GAAGX,SAAS,CAACY,OAAO;;AAE1G;AACA,eAAeZ,SAAS,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}