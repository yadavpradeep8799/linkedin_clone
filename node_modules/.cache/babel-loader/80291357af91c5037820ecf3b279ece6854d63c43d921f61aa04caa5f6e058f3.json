{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  posts: []\n};\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    addPost(state, action) {\n      state.posts.push(action.payload);\n    },\n    likePost(state, action) {\n      const post = state.posts.find(post => post.id === action.payload);\n      if (post) {\n        post.likes += 1;\n      }\n    },\n    addComment(state, action) {\n      const post = state.posts.find(post => post.id === action.payload.postId);\n      if (post) {\n        post.comments.push(action.payload.comment);\n      }\n    }\n  }\n});\nexport const {\n  addPost,\n  likePost,\n  addComment\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","posts","postsSlice","name","reducers","addPost","state","action","push","payload","likePost","post","find","id","likes","addComment","postId","comments","comment","actions","reducer"],"sources":["D:/React_Js/linkedin-clone/src/redux/postsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface Post {\r\n  id: string;\r\n  content: string;\r\n  image?: string;\r\n  comments: string[];\r\n  likes: number;\r\n}\r\n\r\ninterface PostsState {\r\n  posts: Post[];\r\n}\r\n\r\nconst initialState: PostsState = {\r\n  posts: [],\r\n};\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    addPost(state, action: PayloadAction<Post>) {\r\n      state.posts.push(action.payload);\r\n    },\r\n    likePost(state, action: PayloadAction<string>) {\r\n      const post = state.posts.find(post => post.id === action.payload);\r\n      if (post) {\r\n        post.likes += 1;\r\n      }\r\n    },\r\n    addComment(state, action: PayloadAction<{ postId: string; comment: string }>) {\r\n      const post = state.posts.find(post => post.id === action.payload.postId);\r\n      if (post) {\r\n        post.comments.push(action.payload.comment);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addPost, likePost, addComment } = postsSlice.actions;\r\nexport default postsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAc7D,MAAMC,YAAwB,GAAG;EAC/BC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,UAAU,GAAGH,WAAW,CAAC;EAC7BI,IAAI,EAAE,OAAO;EACbH,YAAY;EACZI,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAA2B,EAAE;MAC1CD,KAAK,CAACL,KAAK,CAACO,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAClC,CAAC;IACDC,QAAQA,CAACJ,KAAK,EAAEC,MAA6B,EAAE;MAC7C,MAAMI,IAAI,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,EAAE,KAAKN,MAAM,CAACE,OAAO,CAAC;MACjE,IAAIE,IAAI,EAAE;QACRA,IAAI,CAACG,KAAK,IAAI,CAAC;MACjB;IACF,CAAC;IACDC,UAAUA,CAACT,KAAK,EAAEC,MAA0D,EAAE;MAC5E,MAAMI,IAAI,GAAGL,KAAK,CAACL,KAAK,CAACW,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,EAAE,KAAKN,MAAM,CAACE,OAAO,CAACO,MAAM,CAAC;MACxE,IAAIL,IAAI,EAAE;QACRA,IAAI,CAACM,QAAQ,CAACT,IAAI,CAACD,MAAM,CAACE,OAAO,CAACS,OAAO,CAAC;MAC5C;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEb,OAAO;EAAEK,QAAQ;EAAEK;AAAW,CAAC,GAAGb,UAAU,CAACiB,OAAO;AACnE,eAAejB,UAAU,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}