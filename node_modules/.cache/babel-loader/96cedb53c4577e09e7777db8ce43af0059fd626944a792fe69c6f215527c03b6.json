{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport imagePost from '../assets/pp.jpg';\nconst initialState = {\n  posts: [{\n    id: 1,\n    userName: 'Pradeep Yadav',\n    userTitle: 'Frontend Developer @ Dotvik Solutions',\n    content: 'This is my first post!',\n    image: imagePost,\n    // corrected to use the imported image\n    tags: '#first #post',\n    likes: 10,\n    comments: ['Great post!', 'Congrats on your first post!']\n  }]\n};\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    addPost: (state, action) => {\n      const newPost = {\n        id: state.posts.length + 1,\n        userName: 'Pradeep Yadav',\n        // Default or dynamic user name\n        userTitle: 'Frontend Developer @ Dotvik Solutions',\n        // Default or dynamic user title\n        content: action.payload.content,\n        image: action.payload.image,\n        tags: action.payload.tags,\n        likes: 0,\n        comments: []\n      };\n      state.posts.push(newPost);\n    },\n    likePost: (state, action) => {\n      const post = state.posts.find(p => p.id === action.payload);\n      if (post) {\n        post.likes += 1;\n      }\n    },\n    addComment: (state, action) => {\n      const post = state.posts.find(p => p.id === action.payload.postId);\n      if (post) {\n        post.comments.push(action.payload.comment);\n      }\n    },\n    editPost: (state, action) => {\n      const post = state.posts.find(p => p.id === action.payload.id);\n      if (post) {\n        post.content = action.payload.content;\n      }\n    }\n  }\n});\nexport const {\n  addPost,\n  likePost,\n  addComment,\n  editPost\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","imagePost","initialState","posts","id","userName","userTitle","content","image","tags","likes","comments","postsSlice","name","reducers","addPost","state","action","newPost","length","payload","push","likePost","post","find","p","addComment","postId","comment","editPost","actions","reducer"],"sources":["H:/PRADEEP_CLIENTS/all project/linkedin_clone/src/redux/postsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport imagePost from '../assets/pp.jpg';\r\n\r\ninterface Post {\r\n  id: number;\r\n  userName: string;  // New field for user's name\r\n  userTitle: string; // New field for user's job title\r\n  content: string;\r\n  image: string;\r\n  tags: string;\r\n  likes: number;\r\n  comments: string[];\r\n}\r\n\r\ninterface PostState {\r\n  posts: Post[];\r\n}\r\n\r\nconst initialState: PostState = {\r\n  posts: [\r\n    {\r\n      id: 1,\r\n      userName: 'Pradeep Yadav',\r\n      userTitle: 'Frontend Developer @ Dotvik Solutions',\r\n      content: 'This is my first post!',\r\n      image: imagePost, // corrected to use the imported image\r\n      tags: '#first #post',\r\n      likes: 10,\r\n      comments: ['Great post!', 'Congrats on your first post!'],\r\n    },\r\n  ],\r\n};\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    addPost: (state, action: PayloadAction<{ content: string; image: string; tags: string }>) => {\r\n      const newPost: Post = {\r\n        id: state.posts.length + 1,\r\n        userName: 'Pradeep Yadav', // Default or dynamic user name\r\n        userTitle: 'Frontend Developer @ Dotvik Solutions', // Default or dynamic user title\r\n        content: action.payload.content,\r\n        image: action.payload.image,\r\n        tags: action.payload.tags,\r\n        likes: 0,\r\n        comments: [],\r\n      };\r\n      state.posts.push(newPost);\r\n    },\r\n    likePost: (state, action: PayloadAction<number>) => {\r\n      const post = state.posts.find((p) => p.id === action.payload);\r\n      if (post) {\r\n        post.likes += 1;\r\n      }\r\n    },\r\n    addComment: (state, action: PayloadAction<{ postId: number; comment: string }>) => {\r\n      const post = state.posts.find((p) => p.id === action.payload.postId);\r\n      if (post) {\r\n        post.comments.push(action.payload.comment);\r\n      }\r\n    },\r\n    editPost: (state, action: PayloadAction<{ id: number; content: string }>) => {\r\n      const post = state.posts.find((p) => p.id === action.payload.id);\r\n      if (post) {\r\n        post.content = action.payload.content;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addPost, likePost, addComment, editPost } = postsSlice.actions;\r\nexport default postsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAC7D,OAAOC,SAAS,MAAM,kBAAkB;AAiBxC,MAAMC,YAAuB,GAAG;EAC9BC,KAAK,EAAE,CACL;IACEC,EAAE,EAAE,CAAC;IACLC,QAAQ,EAAE,eAAe;IACzBC,SAAS,EAAE,uCAAuC;IAClDC,OAAO,EAAE,wBAAwB;IACjCC,KAAK,EAAEP,SAAS;IAAE;IAClBQ,IAAI,EAAE,cAAc;IACpBC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,CAAC,aAAa,EAAE,8BAA8B;EAC1D,CAAC;AAEL,CAAC;AAED,MAAMC,UAAU,GAAGZ,WAAW,CAAC;EAC7Ba,IAAI,EAAE,OAAO;EACbX,YAAY;EACZY,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAuE,KAAK;MAC3F,MAAMC,OAAa,GAAG;QACpBd,EAAE,EAAEY,KAAK,CAACb,KAAK,CAACgB,MAAM,GAAG,CAAC;QAC1Bd,QAAQ,EAAE,eAAe;QAAE;QAC3BC,SAAS,EAAE,uCAAuC;QAAE;QACpDC,OAAO,EAAEU,MAAM,CAACG,OAAO,CAACb,OAAO;QAC/BC,KAAK,EAAES,MAAM,CAACG,OAAO,CAACZ,KAAK;QAC3BC,IAAI,EAAEQ,MAAM,CAACG,OAAO,CAACX,IAAI;QACzBC,KAAK,EAAE,CAAC;QACRC,QAAQ,EAAE;MACZ,CAAC;MACDK,KAAK,CAACb,KAAK,CAACkB,IAAI,CAACH,OAAO,CAAC;IAC3B,CAAC;IACDI,QAAQ,EAAEA,CAACN,KAAK,EAAEC,MAA6B,KAAK;MAClD,MAAMM,IAAI,GAAGP,KAAK,CAACb,KAAK,CAACqB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACrB,EAAE,KAAKa,MAAM,CAACG,OAAO,CAAC;MAC7D,IAAIG,IAAI,EAAE;QACRA,IAAI,CAACb,KAAK,IAAI,CAAC;MACjB;IACF,CAAC;IACDgB,UAAU,EAAEA,CAACV,KAAK,EAAEC,MAA0D,KAAK;MACjF,MAAMM,IAAI,GAAGP,KAAK,CAACb,KAAK,CAACqB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACrB,EAAE,KAAKa,MAAM,CAACG,OAAO,CAACO,MAAM,CAAC;MACpE,IAAIJ,IAAI,EAAE;QACRA,IAAI,CAACZ,QAAQ,CAACU,IAAI,CAACJ,MAAM,CAACG,OAAO,CAACQ,OAAO,CAAC;MAC5C;IACF,CAAC;IACDC,QAAQ,EAAEA,CAACb,KAAK,EAAEC,MAAsD,KAAK;MAC3E,MAAMM,IAAI,GAAGP,KAAK,CAACb,KAAK,CAACqB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACrB,EAAE,KAAKa,MAAM,CAACG,OAAO,CAAChB,EAAE,CAAC;MAChE,IAAImB,IAAI,EAAE;QACRA,IAAI,CAAChB,OAAO,GAAGU,MAAM,CAACG,OAAO,CAACb,OAAO;MACvC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEQ,OAAO;EAAEO,QAAQ;EAAEI,UAAU;EAAEG;AAAS,CAAC,GAAGjB,UAAU,CAACkB,OAAO;AAC7E,eAAelB,UAAU,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}