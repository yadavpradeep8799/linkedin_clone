{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  posts: []\n};\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    addPost(state, action) {\n      state.posts.push({\n        id: state.posts.length + 1,\n        content: action.payload,\n        likes: 0,\n        comments: []\n      });\n    },\n    likePost(state, action) {\n      const post = state.posts.find(p => p.id === action.payload);\n      if (post) {\n        post.likes += 1;\n      }\n    },\n    addComment(state, action) {\n      const post = state.posts.find(p => p.id === action.payload.postId);\n      if (post) {\n        post.comments.push(action.payload.comment);\n      }\n    }\n  }\n});\nexport const {\n  addPost,\n  likePost,\n  addComment\n} = postsSlice.actions;\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","posts","postsSlice","name","reducers","addPost","state","action","push","id","length","content","payload","likes","comments","likePost","post","find","p","addComment","postId","comment","actions","reducer"],"sources":["D:/React_Js/linkedin-clone/src/redux/postsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface Post {\r\n  id: number;\r\n  content: string;\r\n  likes: number;\r\n  comments: string[];\r\n}\r\n\r\ninterface PostsState {\r\n  posts: Post[];\r\n}\r\n\r\nconst initialState: PostsState = {\r\n  posts: [],\r\n};\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    addPost(state, action: PayloadAction<string>) {\r\n      state.posts.push({\r\n        id: state.posts.length + 1,\r\n        content: action.payload,\r\n        likes: 0,\r\n        comments: [],\r\n      });\r\n    },\r\n    likePost(state, action: PayloadAction<number>) {\r\n      const post = state.posts.find((p) => p.id === action.payload);\r\n      if (post) {\r\n        post.likes += 1;\r\n      }\r\n    },\r\n    addComment(state, action: PayloadAction<{ postId: number; comment: string }>) {\r\n      const post = state.posts.find((p) => p.id === action.payload.postId);\r\n      if (post) {\r\n        post.comments.push(action.payload.comment);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addPost, likePost, addComment } = postsSlice.actions;\r\nexport default postsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAa7D,MAAMC,YAAwB,GAAG;EAC/BC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,UAAU,GAAGH,WAAW,CAAC;EAC7BI,IAAI,EAAE,OAAO;EACbH,YAAY;EACZI,QAAQ,EAAE;IACRC,OAAOA,CAACC,KAAK,EAAEC,MAA6B,EAAE;MAC5CD,KAAK,CAACL,KAAK,CAACO,IAAI,CAAC;QACfC,EAAE,EAAEH,KAAK,CAACL,KAAK,CAACS,MAAM,GAAG,CAAC;QAC1BC,OAAO,EAAEJ,MAAM,CAACK,OAAO;QACvBC,KAAK,EAAE,CAAC;QACRC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC;IACDC,QAAQA,CAACT,KAAK,EAAEC,MAA6B,EAAE;MAC7C,MAAMS,IAAI,GAAGV,KAAK,CAACL,KAAK,CAACgB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACT,EAAE,KAAKF,MAAM,CAACK,OAAO,CAAC;MAC7D,IAAII,IAAI,EAAE;QACRA,IAAI,CAACH,KAAK,IAAI,CAAC;MACjB;IACF,CAAC;IACDM,UAAUA,CAACb,KAAK,EAAEC,MAA0D,EAAE;MAC5E,MAAMS,IAAI,GAAGV,KAAK,CAACL,KAAK,CAACgB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACT,EAAE,KAAKF,MAAM,CAACK,OAAO,CAACQ,MAAM,CAAC;MACpE,IAAIJ,IAAI,EAAE;QACRA,IAAI,CAACF,QAAQ,CAACN,IAAI,CAACD,MAAM,CAACK,OAAO,CAACS,OAAO,CAAC;MAC5C;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEhB,OAAO;EAAEU,QAAQ;EAAEI;AAAW,CAAC,GAAGjB,UAAU,CAACoB,OAAO;AACnE,eAAepB,UAAU,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}